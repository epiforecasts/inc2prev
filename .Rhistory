pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
if (kids_ab) {
abdata = data[[1]]$antibodies
vcdata = data[[1]]$vaccination
vcdata = list(vcdata[[1]] %>%  mutate(vaccinated=0))
attr_abs = function(datadf, ab_data){
datadf$antibodies = ab_data
datadf
}
attr_vac = function(datadf, vc_data){
if (is.null(datadf$vaccination[[1]])){
datadf$vaccination = vc_data
}
datadf
}
data_kids = lapply(data_kids, attr_abs, ab_data=abdata)
data_kids = lapply(data_kids, attr_vac, vc_data=vcdata)
ab_draws = unique(
est$samples[[1]] %>%
filter(variable == '16-24') %>%
select("beta", "gamma[1]", "gamma[2]", "delta", 'ab_sigma', "init_dab")
)
pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
if (kids_ab) {
abdata = data[[1]]$antibodies
vcdata = data[[1]]$vaccination
vcdata = list(vcdata[[1]] %>%  mutate(vaccinated=0))
attr_abs = function(datadf, ab_data){
datadf$antibodies = ab_data
datadf
}
attr_vac = function(datadf, vc_data){
if (is.null(datadf$vaccination[[1]])){
datadf$vaccination = vc_data
}
datadf
}
data_kids = lapply(data_kids, attr_abs, ab_data=abdata)
data_kids = lapply(data_kids, attr_vac, vc_data=vcdata)
ab_draws = unique(
est$samples[[1]] %>%
filter(variable == '16-24') %>%
select("beta", "gamma[1]", "gamma[2]", "delta", 'ab_sigma', "init_dab")
)
pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
if (kids_ab) {
abdata = data[[1]]$antibodies
vcdata = data[[1]]$vaccination
vcdata = list(vcdata[[1]] %>%  mutate(vaccinated=0))
attr_abs = function(datadf, ab_data){
datadf$antibodies = ab_data
datadf
}
attr_vac = function(datadf, vc_data){
if (is.null(datadf$vaccination[[1]])){
datadf$vaccination = vc_data
}
datadf
}
data_kids = lapply(data_kids, attr_abs, ab_data=abdata)
data_kids = lapply(data_kids, attr_vac, vc_data=vcdata)
ab_draws = unique(
est$samples[[1]] %>%
filter(variable == '16-24') %>%
select("beta", "gamma[1]", "gamma[2]", "delta", 'ab_sigma', "init_dab")
)
pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
if (kids_ab) {
abdata = data[[1]]$antibodies
vcdata = data[[1]]$vaccination
vcdata = list(vcdata[[1]] %>%  mutate(vaccinated=0))
attr_abs = function(datadf, ab_data){
datadf$antibodies = ab_data
datadf
}
attr_vac = function(datadf, vc_data){
if (is.null(datadf$vaccination[[1]])){
datadf$vaccination = vc_data
}
datadf
}
data_kids = lapply(data_kids, attr_abs, ab_data=abdata)
data_kids = lapply(data_kids, attr_vac, vc_data=vcdata)
ab_draws = unique(
est$samples[[1]] %>%
filter(variable == '16-24') %>%
select("beta", "gamma[1]", "gamma[2]", "delta", 'ab_sigma', "init_dab")
)
pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
data_kids
data_kids
if (kids_ab) {
abdata = data[[1]]$antibodies
vcdata = data[[1]]$vaccination
vcdata = list(vcdata[[1]] %>%  mutate(vaccinated=0))
attr_abs = function(datadf, ab_data){
datadf$antibodies = ab_data
datadf
}
attr_vac = function(datadf, vc_data){
if (is.null(datadf$vaccination[[1]])){
datadf$vaccination = vc_data
}
datadf
}
data_kids = lapply(data_kids, attr_abs, ab_data=abdata)
data_kids = lapply(data_kids, attr_vac, vc_data=vcdata)
ab_draws = unique(
est$samples[[1]] %>%
filter(variable == '16-24') %>%
select("beta", "gamma[1]", "gamma[2]", "delta", 'ab_sigma', "init_dab")
)
pre_fit_ab_dat = list(n_ab_draws = dim(ab_draws)[1], n_ab_pars = dim(ab_draws)[2], ab_draws = ab_draws)
mod <- i2p_model("stan/inc2prev_prefitab_data.stan")
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est_kids <- future_lapply(
data_kids, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE,
pre_fit_ab_dat = pre_fit_ab_dat
)
est_kids <- rbindlist(est_kids, use.names = TRUE, fill = TRUE)
# Add summary information to posterior summary and samples
est_kids[, summary := map2(summary, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, summary := map2(summary, level, ~ as.data.table(.x)[, level := .y])]
est_kids[, samples := map2(samples, variable, ~ as.data.table(.x)[, variable := .y])]
est_kids[, samples := map2(samples, level, ~ as.data.table(.x)[, level := .y])]
# Bind posterior samples/summary together
estimates_kids <- bind_rows(est_kids$summary)
samples_kids <- bind_rows(est_kids$samples)
diagnostics_kids <- select(est_kids, -samples, -summary)
saveRDS(samples_kids, paste0("outputs/samples_kids", suffix, ".rds"))
saveRDS(estimates_kids, paste0("outputs/estimates_kids", suffix, ".rds"))
saveRDS(diagnostics_kids, paste0("outputs/diagnostics_kids", suffix, ".rds"))
}
est_kids
est_kids
est_kids$data
suffix
suffix = _kids_age_ab
suffix = "_kids_age_ab"
estimates <- readRDS(paste0("outputs/estimates", suffix, ".rds"))
samples <- readRDS(paste0("outputs/samples", suffix, ".rds"))
nhse <- "Midlands" %in% estimates$variable
prev <- read_cis(nhse_regions = nhse)
if (antibodies) {
ab <- read_ab(nhse_regions = nhse)
} else {
ab <- NULL
}
if (variants) {
early <- NULL
} else {
early <- read_early(nhse_regions = nhse)
}
variants
levels <- unique(estimates$level)
safe_plot_wrapper <- purrr::safely(plot_wrapper)
safe_plot_wrapper <- purrr::safely(plot_wrapper)
map(
levels, plot_wrapper,
prev = prev, ab = ab, estimates = estimates,
samples = samples, early = early,
suffix = suffix, extension = ".svg"
)
suppressMessages(library(ggplot2))
suppressMessages(library(here))
suppressMessages(library(data.table))
suppressMessages(library(dplyr))
suppressMessages(library(truncnorm))
suppressMessages(library(forcats))
suppressMessages(library(socialmixr))
suppressMessages(library(readr))
suppressMessages(library(purrr))
suppressMessages(library(docopt))
doc <- "
Analyse outputs of the inc2prev model
Usage:
estimate.R [--ab] [--local | --age | --variants]
estimate.R -h | --help
Options:
-h --help        Show this screen
-a --ab          Use antibody data
-l, --local      Analyse local dynamics
-g, --age        Analyse age
-v, --variants   Analyse variants
"
## if running interactively can set opts to run with options
if (interactive()) {
if (!exists("opts")) opts <- list()
} else {
opts <- docopt(doc)
}
antibodies <- !is.null(opts$ab) && opts$ab
local <- !is.null(opts$local) && opts$local
age <- !is.null(opts$age) && opts$age
variants <- !is.null(opts$variants) && opts$variants
## Get tools
functions <- list.files(here("R"), full.names = TRUE)
walk(functions, source)
suffix
estimates <- readRDS(paste0("outputs/estimates", suffix, ".rds"))
samples <- readRDS(paste0("outputs/samples", suffix, ".rds"))
nhse <- "Midlands" %in% estimates$variable
prev <- read_cis(nhse_regions = nhse)
if (antibodies) {
ab <- read_ab(nhse_regions = nhse)
} else {
ab <- NULL
}
if (variants) {
early <- NULL
} else {
early <- read_early(nhse_regions = nhse)
}
levels <- unique(estimates$level)
safe_plot_wrapper <- purrr::safely(plot_wrapper)
map(
levels, plot_wrapper,
prev = prev, ab = ab, estimates = estimates,
samples = samples, early = early,
suffix = suffix, extension = ".svg"
)
#! /usr/bin/env Rscript
suppressMessages(library(cmdstanr))
suppressMessages(library(data.table))
suppressMessages(library(dplyr))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(here))
suppressMessages(library(socialmixr))
suppressMessages(library(lubridate))
suppressMessages(library(readr))
suppressMessages(library(tidyr))
suppressMessages(library(future.apply))
suppressMessages(library(future.callr))
suppressMessages(library(future))
suppressMessages(library(docopt))
doc <- "
Estimate incidence from ONS positivity prevalence data,
possibly including antibody and vaccination data
Usage:
estimate.R [--ab] [--local | --age | --variants] [--nhse]
estimate.R -h | --help
Options:
-h, --help       Show this screen
-a, --ab         Use antibody data
-l, --local      Model local dynamics
-g, --age        Model age
-v, --variants   Model variants
-n, --nhse       Analyes NHSE regions
"
opts = list(ab=T, age=T, kids_ab=T)
## if running interactively can set opts to run with options
if (interactive()) {
if (!exists("opts")) opts <- list()
} else {
opts <- docopt(doc)
}
antibodies <- !is.null(opts$ab) && opts$ab
local <- !is.null(opts$local) && opts$local
age <- !is.null(opts$age) && opts$age
variants <- !is.null(opts$variants) && opts$variants
nhse <- !is.null(opts$nhse) && opts$nhse
kids_ab <- !is.null(opts$kids_ab) && opts$kids_ab
kids_ab
age
antibodies
## Get tools
functions <- list.files(here("R"), full.names = TRUE)
walk(functions, source)
# Load prevalence data and split by location
data <- read_cis(nhse_regions = nhse)
if (local) {
filter_level <- "local"
suffix <- "_local"
} else if (age) {
filter_level <- "age_school"
suffix <- "_age"
} else if (variants) {
filter_level <- c("variant_national", "variant_regional")
suffix <- "_variants"
} else {
filter_level <- c("national", "regional")
suffix <- "_regional"
}
data <- data %>%
filter(level %in% filter_level)
data <- data %>%
nest(prevalence = c(-variable))
if (kids_ab){
if (antibodies) {
ab <- read_ab(nhse_regions = nhse) %>%
nest(antibodies = c(-variable))
vacc <- read_vacc(nhse_regions = nhse) %>%
nest(vaccination = c(-variable))
early <- read_early(nhse_regions = nhse) %>%
nest(initial_antibodies = c(-variable))
data <- data %>%
left_join(ab, by = "variable") %>%
left_join(vacc, by = "variable") %>%
left_join(early, by = "variable")
}
data_kids <- data %>% filter(variable %in% c('2-10', '11-15')) %>%
group_split(variable)
data <- data %>% filter(!(variable %in% c('2-10', '11-15'))) %>%
group_split(variable)
}else{
if (antibodies) {
ab <- read_ab(nhse_regions = nhse) %>%
nest(antibodies = c(-variable))
vacc <- read_vacc(nhse_regions = nhse) %>%
nest(vaccination = c(-variable))
early <- read_early(nhse_regions = nhse) %>%
nest(initial_antibodies = c(-variable))
data <- data %>%
inner_join(ab, by = "variable") %>%
inner_join(vacc, by = "variable") %>%
inner_join(early, by = "variable")
}
data <- data %>%
group_split(variable)
}
# Location probability of detection posterior
prob_detect <- read_prob_detectable()
# Compile incidence -> Prevalence model
if (antibodies) {
mod <- i2p_model("stan/inc2prev_antibodies.stan")
} else {
mod <- i2p_model()
}
# Compile tune inverse gamma model
tune <- i2p_gp_tune_model()
## Fit model
dir.create(here::here("outputs"), showWarnings = FALSE)
# create a helper function to estimate the model and apply some
# summary statistics
incidence_with_var <- function(data, pb, model, gp_model, pre_fit_ab_dat=list()) {
message("Fitting model")
mod <- cmdstanr::cmdstan_model(
model$stan_file(),
include_paths = here::here("stan", "functions")
)
safe_incidence <- purrr::safely(incidence)
variables <- c("est_prev", "infections", "dcases", "r", "R")
prev <- data$prevalence[[1]]
if (antibodies) {
variables <- c(variables, "est_ab", "dab", "beta", "gamma", "delta", 'ab_sigma', "init_dab")
ab <- data$antibodies[[1]]
vacc <- data$vaccination[[1]]
init_ab <- data$initial_antibodies[[1]]
} else {
ab <- NULL
vacc <- NULL
init_ab <- NULL
}
fit <- safe_incidence(
prev = prev,
ab = ab,
vacc = vacc,
init_ab = init_ab,
variables = variables,
prob_detect = pb, parallel_chains = 2, iter_warmup = 250,
chains = 2, model = mod, adapt_delta = 0.9, max_treedepth = 12,
data_args = list(gp_tune_model = gp_model),
pre_fit_ab_dat = pre_fit_ab_dat
)
if (is.null(fit$result)) {
fit <- data.table::data.table(
error = list(fit$error)
)
} else {
fit <- fit$result
}
level <- unique(data$prevalence[[1]]$level)
variable <- data$variable
fit <- fit[, level := level]
fit <- fit[, variable := variable]
return(fit)
}
# Run model fits in parallel
plan(callr, workers = future::availableCores())
est <- future_lapply(
data, incidence_with_var,
pb = prob_detect,
model = mod, gp_model = tune,
future.seed = TRUE
)
estimates
est
